// <auto-generated />
using System;
using Application.DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Application.DataAccessLayer.Migrations
{
    [DbContext(typeof(ParkingAppDbContext))]
    [Migration("20210407075923_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Application.DataAccessLayer.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CardId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ParkingPassId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("LicensePlateNumber")
                        .IsUnique();

                    b.HasIndex("ParkingPassId")
                        .IsUnique()
                        .HasFilter("[ParkingPassId] IS NOT NULL");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("Application.DataAccessLayer.Entities.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ParkingPassId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ParkingPassId")
                        .IsUnique();

                    b.ToTable("Card");
                });

            modelBuilder.Entity("Application.DataAccessLayer.Entities.LoggedParkingPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.ToTable("LoggedParkingPeriod");
                });

            modelBuilder.Entity("Application.DataAccessLayer.Entities.ParkingPass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<bool>("IsKeyPartner")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PaymentOption")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("ParkingPass");
                });

            modelBuilder.Entity("Application.DataAccessLayer.Entities.Car", b =>
                {
                    b.HasOne("Application.DataAccessLayer.Entities.Card", "Card")
                        .WithMany("Cars")
                        .HasForeignKey("CardId");

                    b.HasOne("Application.DataAccessLayer.Entities.ParkingPass", "ParkingPass")
                        .WithOne("Car")
                        .HasForeignKey("Application.DataAccessLayer.Entities.Car", "ParkingPassId");

                    b.Navigation("Card");

                    b.Navigation("ParkingPass");
                });

            modelBuilder.Entity("Application.DataAccessLayer.Entities.Card", b =>
                {
                    b.HasOne("Application.DataAccessLayer.Entities.ParkingPass", "ParkingPass")
                        .WithOne("Card")
                        .HasForeignKey("Application.DataAccessLayer.Entities.Card", "ParkingPassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParkingPass");
                });

            modelBuilder.Entity("Application.DataAccessLayer.Entities.LoggedParkingPeriod", b =>
                {
                    b.HasOne("Application.DataAccessLayer.Entities.Car", "Car")
                        .WithMany("LoggedParkingPeriods")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Application.DataAccessLayer.Entities.Car", b =>
                {
                    b.Navigation("LoggedParkingPeriods");
                });

            modelBuilder.Entity("Application.DataAccessLayer.Entities.Card", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Application.DataAccessLayer.Entities.ParkingPass", b =>
                {
                    b.Navigation("Car");

                    b.Navigation("Card");
                });
#pragma warning restore 612, 618
        }
    }
}
